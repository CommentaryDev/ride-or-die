// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://u467791759_benjiride:oJrniRnh8@193.203.168.2/u467791759_rideordie"
}

//Personals
model Brands {
  id_brand    String   @id @default(uuid())
  name        String   @db.VarChar(50)
  createdAt   DateTime @default(now())
  products Products[]
}
model Categories {
  id_category String   @id @default(uuid())
  name        String   @db.VarChar(50)
  createdAt   DateTime @default(now())
  products Products[]
}
model Products {
  id_product  String   @id @default(uuid())
  name        String   @db.VarChar(50)
  desc        String   @db.VarChar(400)
  imageURL    String   @db.VarChar(250)
  published   Boolean  @default(false)
  trending    Boolean  @default(false)
  price       String  
  price_id    String
  brand_id    String
  category_id String
  type_id     String
  brand       Brands      @relation(fields: [brand_id], references: [id_brand])
  category    Categories[]
  type        Types       @relation(fields: [type_id], references: [id_type])
  createdAt   DateTime    @default(now())
}
model Types {
  id_type     String    @id @default(uuid())
  name        String    @db.VarChar(50)
  createdAt   DateTime  @default(now())
  products    Products[]
}

model Order {
  id_order String   @id @default(uuid())
  amount   Int 
  nb_lines Int
  createdAt   DateTime  @default(now())
}
model OrderLine{
  id_orderline String   @id @default(uuid())
  id_order     String
  product_name String
  stripe_id    String
  quantity     Int
  unitPrice    Int
  lineTotal    Int
  createdAt   DateTime  @default(now())
}



//Required from next-auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
